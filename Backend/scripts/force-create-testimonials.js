const { testConnection, sequelize } = require('../config/database');
const { Location, Service, Testimonial } = require('../models');

const forceCreateTestimonials = async () => {
  try {
    console.log('üöÄ Cr√©ation forc√©e des t√©moignages...');
    
    // Tester la connexion √† la base de donn√©es
    await testConnection();
    
    // Synchroniser la base de donn√©es
    console.log('üîÑ Synchronisation de la base de donn√©es...');
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Tables synchronis√©es');
    
    // R√©cup√©rer les locations et services existants
    const locations = await Location.findAll();
    const services = await Service.findAll();
    
    console.log(`üìç ${locations.length} locations trouv√©es`);
    console.log(`üîß ${services.length} services trouv√©s`);
    
    if (locations.length === 0 || services.length === 0) {
      console.log('‚ùå Pas de locations ou services trouv√©s pour cr√©er les t√©moignages');
      return;
    }
    
    // Supprimer tous les t√©moignages existants
    await Testimonial.destroy({ where: {} });
    console.log('üóëÔ∏è  T√©moignages existants supprim√©s');
    
    // Cr√©er des t√©moignages
    const testimonials = await Testimonial.bulkCreate([
      {
        customerName: 'Jean Dupont',
        customerEmail: 'jean.dupont@email.com',
        rating: 5,
        comment: 'Excellent service ! Le coiffeur √©tait tr√®s professionnel et √† l\'√©coute. Je recommande vivement ce salon.',
        serviceId: services[0].id,
        locationId: locations[0].id,
        status: 'approved'
      },
      {
        customerName: 'Marie Martin',
        customerEmail: 'marie.martin@email.com',
        rating: 4,
        comment: 'Tr√®s bon accueil et coupe parfaite. L\'ambiance est d√©tendue et le personnel sympathique.',
        serviceId: services[1] ? services[1].id : services[0].id,
        locationId: locations[0].id,
        status: 'approved'
      },
      {
        customerName: 'Pierre Durand',
        customerEmail: 'pierre.durand@email.com',
        rating: 5,
        comment: 'Service impeccable ! La taille de barbe est parfaite et le coiffeur prend le temps n√©cessaire.',
        serviceId: services[2] ? services[2].id : services[0].id,
        locationId: locations[1] ? locations[1].id : locations[0].id,
        status: 'approved'
      },
      {
        customerName: 'Sophie Leroy',
        customerEmail: 'sophie.leroy@email.com',
        rating: 4,
        comment: 'Belle exp√©rience dans ce salon. L\'√©quipe est comp√©tente et l\'environnement agr√©able.',
        serviceId: services[1] ? services[1].id : services[0].id,
        locationId: locations[1] ? locations[1].id : locations[0].id,
        status: 'approved'
      }
    ]);

    console.log(`‚úÖ ${testimonials.length} t√©moignages cr√©√©s avec succ√®s !`);
    
    // V√©rifier le nombre total
    const totalTestimonials = await Testimonial.count();
    console.log(`üìä Total de t√©moignages dans la base : ${totalTestimonials}`);
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des t√©moignages:', error);
    process.exit(1);
  }
};

forceCreateTestimonials();
